//可以通过import来将其他的less引入到当前的less中
@import "./1_less中的变量.less";



.box1 {
    .box2 {
        color: red;
    }
    >.box3 {
        color: red;
        &:hover {
            color: red;
        }
    }

    //为box1设置一个hover
    //& 就表示外层的父元素
    &:hover {
        color: orange;
    }
    div & {
        width: 100px;
    }
}

.p1 {
    width: 100px;
    height: 100px;
}

//:extend() 对当前选择器扩展指定选择器的样式（选择器分组）继承
.p2:extend(.p1) {
    color: red;
}
.p3 {
    //直接对指定的样式进行引用，这里就相当于将p1的样式在这里进行了复制
    //与继承的区别就是复制了一遍样式
    //mixin 混合
    .p1();
    background-color: #f00
}

//使用类选择器时可以在选择器后边添加一个括号，这时我们实际上就创建了一个mixin
.p4() {
    width: 100px;
    height: 100px;
    background-color: #bfa;
}
.p5 {
    .p4;
    color: red;
}

//混合函数  在混合函数中可以直接设置变量
.test(@w:100px,@h:200px,@bg-color:red) {
    width: @w;
    height: @h;
    background-color: @bg-color;
}

div {
    //调用混合函数，按顺序传递参数
    //test里没有默认值的时候必须传够参数数量且不能乱序
    // .test(200px, 300px, #bfa);
    // .test(300px);
    // .test(@bg-color:red, @h:100px, @w:300px)
}

span {
    //取的时red和blue的中间值
    color: average(red, blue);
}

body {
    width: 100px;
    height: 100px;
    background-color: #bfa;
    &:hover {
        //hover的时候颜色加深10%
        background-color: darken(#bfa, 10%);
    }
}

.box7 {
    // 在less中所有的数值都可以直接进行运算
    // + - * /
    width: 100px + 100px;
    height:  100px * 2;
    background-color: #bfa;
}